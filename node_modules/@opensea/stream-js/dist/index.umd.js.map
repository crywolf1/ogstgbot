{"version":3,"file":"index.umd.js","sources":["../src/helpers.ts","../src/types.ts","../src/constants.ts","../src/client.ts"],"sourcesContent":["export const collectionTopic = (slug: string) => {\n  return `collection:${slug}`;\n};\n","import type { SocketConnectOption } from 'phoenix';\n\nexport type OnClientEvent = <Payload>(\n  collection: string,\n  eventType: EventType,\n  event: BaseStreamMessage<Payload>\n) => boolean;\n\n/**\n * OpenSea Stream API configuration object\n * @param token API key to use for API\n * @param network `Network` type to use. Defaults to `Network.MAINNET`\n * @param apiUrl Optional base URL to use for the API.\n * @param connectOptions `SocketConnectOption` type to use to connect to the Stream API socket.\n * @param onError a callback function to use whenever errors occur in the SDK.\n * @param logLevel `LogLevel` type to define the amount of logging the SDK should provide.\n * @param onEvent a callback function to use whenever an event is emmited in the SDK. Can be used to globally apply some logic, e.g emitting metric/logging etc. If the onEvent handler returns false, event will be filtered and the subscription callback won't be invoked.\n */\nexport type ClientConfig = {\n  network?: Network;\n  apiUrl?: string;\n  token: string;\n  connectOptions?: Partial<SocketConnectOption>;\n  onError?: (error: unknown) => void;\n  logLevel?: LogLevel;\n  onEvent?: OnClientEvent;\n};\n\nexport enum Network {\n  MAINNET = 'mainnet',\n  TESTNET = 'testnet'\n}\n\nexport enum EventType {\n  ITEM_METADATA_UPDATED = 'item_metadata_updated',\n  ITEM_LISTED = 'item_listed',\n  ITEM_SOLD = 'item_sold',\n  ITEM_TRANSFERRED = 'item_transferred',\n  ITEM_RECEIVED_OFFER = 'item_received_offer',\n  ITEM_RECEIVED_BID = 'item_received_bid',\n  ITEM_CANCELLED = 'item_cancelled',\n  COLLECTION_OFFER = 'collection_offer',\n  TRAIT_OFFER = 'trait_offer',\n  ORDER_INVALIDATE = 'order_invalidate',\n  ORDER_REVALIDATE = 'order_revalidate'\n}\n\ninterface BaseItemMetadataType {\n  name: string | null;\n  image_url: string | null;\n  animation_url: string | null;\n  metadata_url: string | null;\n}\n\nexport type BaseItemType<Metadata = BaseItemMetadataType> = {\n  nft_id: string;\n  permalink: string;\n  metadata: Metadata;\n  chain: {\n    name: string;\n  };\n};\n\nexport type Payload = {\n  item: BaseItemType;\n  collection: {\n    slug: string;\n  };\n  chain: string;\n};\n\nexport type BaseStreamMessage<Payload> = {\n  event_type: string;\n  sent_at: string;\n  payload: Payload;\n};\n\nexport type Trait = {\n  trait_type: string;\n  value: string | null;\n  display_type: string | null;\n  max_value: number | null;\n  trait_count: number | null;\n  order: number | null;\n};\n\ninterface ExtendedItemMetadataType extends BaseItemMetadataType {\n  description: string | null;\n  backrgound_color: string | null;\n  traits: Trait[];\n}\n\nexport type ItemMetadataUpdatePayload = {\n  collection: { slug: string };\n  item: BaseItemType<ExtendedItemMetadataType>;\n};\n\nexport type ItemMetadataUpdate = BaseStreamMessage<ItemMetadataUpdatePayload>;\n\nexport type Account = {\n  address: string;\n};\n\nexport type PaymentToken = {\n  address: string;\n  decimals: number;\n  eth_price: string;\n  name: string;\n  symbol: string;\n  usd_price: string;\n};\n\nexport interface ItemListedEventPayload extends Payload {\n  quantity: number;\n  listing_type: string;\n  listing_date: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  base_price: string;\n  payment_token: PaymentToken;\n  is_private: boolean;\n  order_hash: string;\n  event_timestamp: string;\n}\n\nexport type ItemListedEvent = BaseStreamMessage<ItemListedEventPayload>;\n\nexport type Transaction = {\n  hash: string;\n  timestamp: string;\n};\n\nexport interface ItemSoldEventPayload extends Payload {\n  quantity: number;\n  listing_type: string;\n  closing_date: string;\n  transaction: Transaction;\n  maker: Account;\n  taker: Account;\n  order_hash: string;\n  sale_price: string;\n  payment_token: PaymentToken;\n  is_private: boolean;\n  event_timestamp: string;\n}\n\nexport type ItemSoldEvent = BaseStreamMessage<ItemSoldEventPayload>;\n\nexport interface ItemTransferredEventPayload extends Payload {\n  from_account: Account;\n  quantity: number;\n  to_account: Account;\n  transaction: Transaction;\n  event_timestamp: string;\n}\n\nexport type ItemTransferredEvent =\n  BaseStreamMessage<ItemTransferredEventPayload>;\n\nexport interface ItemReceivedBidEventPayload extends Payload {\n  quantity: number;\n  created_date: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  order_hash: string;\n  base_price: string;\n  payment_token: PaymentToken;\n  event_timestamp: string;\n}\n\nexport type ItemReceivedBidEvent =\n  BaseStreamMessage<ItemReceivedBidEventPayload>;\n\nexport interface ItemReceivedOfferEventPayload extends Payload {\n  quantity: number;\n  created_date: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  order_hash: string;\n  base_price: string;\n  payment_token: PaymentToken;\n  event_timestamp: string;\n}\n\nexport type ItemReceivedOfferEvent =\n  BaseStreamMessage<ItemReceivedOfferEventPayload>;\n\nexport interface ItemCancelledEventPayload extends Payload {\n  quantity: number;\n  base_price: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  listing_type: string;\n  listing_date: string;\n  transaction: Transaction;\n  payment_token: PaymentToken;\n  order_hash: string;\n  is_private: boolean;\n  event_timestamp: string;\n}\n\nexport type ItemCancelledEvent = BaseStreamMessage<ItemCancelledEventPayload>;\n\nexport interface CollectionOfferEventPayload extends Payload {\n  quantity: number;\n  created_date: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  base_price: string;\n  order_hash: string;\n  payment_token: PaymentToken;\n  collection_criteria: object;\n  asset_contract_criteria: object;\n  event_timestamp: string;\n}\n\nexport type CollectionOfferEvent =\n  BaseStreamMessage<CollectionOfferEventPayload>;\n\nexport interface TraitOfferEventPayload extends Payload {\n  quantity: number;\n  created_date: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  base_price: string;\n  order_hash: string;\n  payment_token: PaymentToken;\n  collection_criteria: object;\n  asset_contract_criteria: object;\n  trait_criteria: object;\n  event_timestamp: string;\n}\n\nexport type TraitOfferEvent = BaseStreamMessage<TraitOfferEventPayload>;\n\nexport interface OrderValidationEventPayload {\n  event_timestamp: string;\n  order_hash: string;\n  protocol_address: string;\n  chain: {\n    name: string;\n  };\n  collection: {\n    slug: string;\n  };\n}\n\nexport type OrderValidationEvent =\n  BaseStreamMessage<OrderValidationEventPayload>;\n\nexport type Callback<Event> = (event: Event) => unknown;\n\nexport enum LogLevel {\n  DEBUG = 20,\n  INFO = 30,\n  WARN = 40,\n  ERROR = 50\n}\n","import { Network } from './types.js';\n\nexport const ENDPOINTS = {\n  [Network.MAINNET]: 'wss://stream.openseabeta.com/socket',\n  [Network.TESTNET]: 'wss://testnets-stream.openseabeta.com/socket'\n};\n","import { Socket, Channel } from 'phoenix';\nimport { collectionTopic } from './helpers.js';\nimport {\n  ClientConfig,\n  BaseStreamMessage,\n  EventType,\n  ItemMetadataUpdate,\n  ItemListedEvent,\n  ItemSoldEvent,\n  ItemTransferredEvent,\n  ItemReceivedBidEvent,\n  ItemReceivedOfferEvent,\n  ItemCancelledEvent,\n  CollectionOfferEvent,\n  TraitOfferEvent,\n  Callback,\n  LogLevel,\n  Network,\n  OnClientEvent,\n  OrderValidationEvent\n} from './types.js';\nimport { ENDPOINTS } from './constants.js';\n\nexport class OpenSeaStreamClient {\n  private socket: Socket;\n  private channels: Map<string, Channel>;\n  private logLevel: LogLevel;\n  private onEvent: OnClientEvent;\n\n  constructor({\n    network = Network.MAINNET,\n    token,\n    apiUrl,\n    connectOptions,\n    logLevel = LogLevel.INFO,\n    onError = (error) => this.error(error),\n    onEvent = () => true\n  }: ClientConfig) {\n    const endpoint = apiUrl || ENDPOINTS[network];\n    const webTransportDefault =\n      typeof window !== 'undefined' ? window.WebSocket : undefined;\n    this.socket = new Socket(endpoint, {\n      params: { token },\n      transport: webTransportDefault,\n      ...connectOptions\n    });\n\n    this.socket.onError(onError);\n    this.channels = new Map<string, Channel>();\n    this.logLevel = logLevel;\n    this.onEvent = onEvent;\n  }\n\n  private debug(message: unknown) {\n    if (this.logLevel <= LogLevel.DEBUG) {\n      console.debug('[DEBUG]:', message);\n    }\n  }\n\n  private info(message: unknown) {\n    if (this.logLevel <= LogLevel.INFO) {\n      console.info('[INFO]:', message);\n    }\n  }\n\n  private warn(message: unknown) {\n    if (this.logLevel <= LogLevel.WARN) {\n      console.warn('[WARN]:', message);\n    }\n  }\n\n  private error(message: unknown) {\n    if (this.logLevel <= LogLevel.ERROR) {\n      console.error('[ERROR]:', message);\n    }\n  }\n\n  public connect = () => {\n    this.debug('Connecting to socket');\n    this.socket.connect();\n  };\n\n  public disconnect = (\n    callback = () => this.info(`Succesfully disconnected from socket`)\n  ) => {\n    this.channels.clear();\n    return this.socket.disconnect(callback);\n  };\n\n  private createChannel = (topic: string): Channel => {\n    const channel = this.socket.channel(topic);\n    channel\n      .join()\n      .receive('ok', () => this.info(`Successfully joined channel \"${topic}\"`))\n      .receive('error', () => this.error(`Failed to join channel \"${topic}\"`));\n\n    this.channels.set(topic, channel);\n    return channel;\n  };\n\n  private getChannel = (topic: string): Channel => {\n    let channel = this.channels.get(topic);\n    if (!channel) {\n      this.debug(`Creating channel for topic: \"${topic}\"`);\n      channel = this.createChannel(topic);\n    }\n    return channel;\n  };\n\n  private on = <Payload, Event extends BaseStreamMessage<Payload>>(\n    eventType: EventType,\n    collectionSlug: string,\n    callback: Callback<Event>\n  ) => {\n    this.socket.connect();\n\n    const topic = collectionTopic(collectionSlug);\n    this.debug(`Fetching channel ${topic}`);\n    const channel = this.getChannel(topic);\n    this.debug(`Subscribing to ${eventType} events on ${topic}`);\n\n    const onClientEvent = this.onEvent;\n    channel.on(eventType, (event) => {\n      if (onClientEvent(collectionSlug, eventType, event)) {\n        callback(event);\n      }\n    });\n\n    return () => {\n      this.debug(`Unsubscribing from ${eventType} events on ${topic}`);\n      channel.leave().receive('ok', () => {\n        this.channels.delete(topic);\n        this.info(\n          `Succesfully left channel \"${topic}\" listening for ${eventType}`\n        );\n      });\n    };\n  };\n\n  public onItemMetadataUpdated = (\n    collectionSlug: string,\n    callback: Callback<ItemMetadataUpdate>\n  ) => {\n    this.debug(`Listening for item metadata updates on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_METADATA_UPDATED, collectionSlug, callback);\n  };\n\n  public onItemCancelled = (\n    collectionSlug: string,\n    callback: Callback<ItemCancelledEvent>\n  ) => {\n    this.debug(`Listening for item cancellations on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_CANCELLED, collectionSlug, callback);\n  };\n\n  public onItemListed = (\n    collectionSlug: string,\n    callback: Callback<ItemListedEvent>\n  ) => {\n    this.debug(`Listening for item listings on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_LISTED, collectionSlug, callback);\n  };\n\n  public onItemSold = (\n    collectionSlug: string,\n    callback: Callback<ItemSoldEvent>\n  ) => {\n    this.debug(`Listening for item sales on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_SOLD, collectionSlug, callback);\n  };\n\n  public onItemTransferred = (\n    collectionSlug: string,\n    callback: Callback<ItemTransferredEvent>\n  ) => {\n    this.debug(`Listening for item transfers on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_TRANSFERRED, collectionSlug, callback);\n  };\n\n  public onItemReceivedOffer = (\n    collectionSlug: string,\n    callback: Callback<ItemReceivedOfferEvent>\n  ) => {\n    this.debug(`Listening for item offers on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_RECEIVED_OFFER, collectionSlug, callback);\n  };\n\n  public onItemReceivedBid = (\n    collectionSlug: string,\n    callback: Callback<ItemReceivedBidEvent>\n  ) => {\n    this.debug(`Listening for item bids on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_RECEIVED_BID, collectionSlug, callback);\n  };\n\n  public onCollectionOffer = (\n    collectionSlug: string,\n    callback: Callback<CollectionOfferEvent>\n  ) => {\n    this.debug(`Listening for collection offers on \"${collectionSlug}\"`);\n    return this.on(EventType.COLLECTION_OFFER, collectionSlug, callback);\n  };\n\n  public onTraitOffer = (\n    collectionSlug: string,\n    callback: Callback<TraitOfferEvent>\n  ) => {\n    this.debug(`Listening for trait offers on \"${collectionSlug}\"`);\n    return this.on(EventType.TRAIT_OFFER, collectionSlug, callback);\n  };\n\n  public onOrderInvalidate = (\n    collectionSlug: string,\n    callback: Callback<OrderValidationEvent>\n  ) => {\n    this.debug(\n      `Listening for order invalidation events on \"${collectionSlug}\"`\n    );\n    return this.on(EventType.ORDER_INVALIDATE, collectionSlug, callback);\n  };\n\n  public onOrderRevalidate = (\n    collectionSlug: string,\n    callback: Callback<OrderValidationEvent>\n  ) => {\n    this.debug(\n      `Listening for order revalidation events on \"${collectionSlug}\"`\n    );\n    return this.on(EventType.ORDER_REVALIDATE, collectionSlug, callback);\n  };\n\n  public onEvents = (\n    collectionSlug: string,\n    eventTypes: EventType[],\n    callback: Callback<BaseStreamMessage<unknown>>\n  ) => {\n    const subscriptions = eventTypes.map((eventType) =>\n      this.on(eventType, collectionSlug, callback)\n    );\n\n    return () => {\n      for (const unsubscribe of subscriptions) {\n        unsubscribe();\n      }\n    };\n  };\n}\n"],"names":["Network","EventType","LogLevel","_ENDPOINTS","ENDPOINTS","MAINNET","TESTNET","OpenSeaStreamClient","_ref","_this","_ref$network","network","token","apiUrl","connectOptions","_ref$logLevel","logLevel","INFO","_ref$onError","onError","error","_ref$onEvent","onEvent","socket","channels","connect","debug","this","disconnect","callback","info","clear","createChannel","topic","channel","join","receive","set","getChannel","get","on","eventType","collectionSlug","onClientEvent","event","leave","onItemMetadataUpdated","ITEM_METADATA_UPDATED","onItemCancelled","ITEM_CANCELLED","onItemListed","ITEM_LISTED","onItemSold","ITEM_SOLD","onItemTransferred","ITEM_TRANSFERRED","onItemReceivedOffer","ITEM_RECEIVED_OFFER","onItemReceivedBid","ITEM_RECEIVED_BID","onCollectionOffer","COLLECTION_OFFER","onTraitOffer","TRAIT_OFFER","onOrderInvalidate","ORDER_INVALIDATE","onOrderRevalidate","ORDER_REVALIDATE","onEvents","eventTypes","subscriptions","map","_step","_iterator","_createForOfIteratorHelperLoose","done","unsubscribe","value","webTransportDefault","window","WebSocket","undefined","Socket","_extends","params","transport","Map","_proto","prototype","message","DEBUG","console","warn","WARN","ERROR"],"mappings":"ylBAAa,IC4BDA,EAKAC,EAiOAC,EClQZC,ED4BYH,EAAAA,aAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,QAGX,CAAA,IAFC,QAAA,UACAA,EAAA,QAAA,UAGUC,EAAAA,eAAAA,GAAAA,EAAAA,EAAAA,YAAAA,EAAAA,UAYX,CAAA,IAXC,sBAAA,wBACAA,EAAA,YAAA,cACAA,EAAA,UAAA,YACAA,EAAA,iBAAA,mBACAA,EAAA,oBAAA,sBACAA,EAAA,kBAAA,oBACAA,EAAA,eAAA,iBACAA,EAAA,iBAAA,mBACAA,EAAA,YAAA,cACAA,EAAA,iBAAA,mBACAA,EAAA,iBAAA,mBAsNUC,EAAAA,cAAAA,GAAAA,EAAAA,EAAQA,WAARA,WAKX,CAAA,IAJCA,EAAA,MAAA,IAAA,QACAA,EAAAA,EAAA,KAAA,IAAA,OACAA,EAAAA,EAAA,KAAA,IAAA,OACAA,EAAAA,EAAA,MAAA,IAAA,QCpQK,IAAME,IAASD,EAAAA,CAAAA,GACnBH,EAAAA,QAAQK,SAAU,sCAAqCF,EACvDH,EAAOA,QAACM,SAAU,+CAA8CH,sCCyBjE,WAAA,SAAAI,EAAAC,GAQeC,IAAAA,EAAAC,KAAAA,EAAAF,EAPbG,QAAAA,OAAUX,IAAHU,EAAGV,EAAAA,QAAQK,QAAOK,EACzBE,EAAKJ,EAALI,MACAC,EAAML,EAANK,OACAC,EAAcN,EAAdM,eAAcC,EAAAP,EACdQ,SAAAA,OAAWd,IAAHa,EAAGb,EAAAA,SAASe,KAAIF,EAAAG,EAAAV,EACxBW,QAAAA,OAAU,IAAHD,EAAG,SAACE,GAAU,OAAAX,EAAKW,MAAMA,EAAM,EAAAF,EAAAG,EAAAb,EACtCc,QAAAA,OAAO,IAAAD,EAAG,WAAM,OAAA,CAAI,EAAAA,EAZdE,KAAAA,YACAC,EAAAA,KAAAA,cACAR,EAAAA,KAAAA,cACAM,EAAAA,KAAAA,oBAkDDG,QAAU,WACfhB,EAAKiB,MAAM,wBACXjB,EAAKc,OAAOE,SACd,EAACE,KAEMC,WAAa,SAClBC,GAGA,YAHQ,IAARA,IAAAA,EAAW,kBAAMpB,EAAKqB,KAA2C,uCAAC,GAElErB,EAAKe,SAASO,QACPtB,EAAKc,OAAOK,WAAWC,EAChC,EAACF,KAEOK,cAAgB,SAACC,GACvB,IAAMC,EAAUzB,EAAKc,OAAOW,QAAQD,GAOpC,OANAC,EACGC,OACAC,QAAQ,KAAM,WAAA,OAAM3B,EAAKqB,KAAqCG,gCAAAA,EAAQ,IAAC,GACvEG,QAAQ,QAAS,WAAA,OAAM3B,EAAKW,MAAiCa,2BAAAA,EAAQ,IAAC,GAEzExB,EAAKe,SAASa,IAAIJ,EAAOC,GAClBA,CACT,EAEQI,KAAAA,WAAa,SAACL,GACpB,IAAIC,EAAUzB,EAAKe,SAASe,IAAIN,GAKhC,OAJKC,IACHzB,EAAKiB,MAAK,gCAAiCO,EAAK,KAChDC,EAAUzB,EAAKuB,cAAcC,IAExBC,CACT,EAEQM,KAAAA,GAAK,SACXC,EACAC,EACAb,GAEApB,EAAKc,OAAOE,UAEZ,IAAMQ,EHnHR,cGmHgCS,EAC9BjC,EAAKiB,MAAK,oBAAqBO,GAC/B,IAAMC,EAAUzB,EAAK6B,WAAWL,GAChCxB,EAAKiB,MAAK,kBAAmBe,EAAS,cAAcR,GAEpD,IAAMU,EAAgBlC,EAAKa,QAO3B,OANAY,EAAQM,GAAGC,EAAW,SAACG,GACjBD,EAAcD,EAAgBD,EAAWG,IAC3Cf,EAASe,EAEb,GAEY,WACVnC,EAAKiB,MAAK,sBAAuBe,EAAS,cAAcR,GACxDC,EAAQW,QAAQT,QAAQ,KAAM,WAC5B3B,EAAKe,SAAe,OAACS,GACrBxB,EAAKqB,KAAI,6BACsBG,EAAK,mBAAmBQ,EAEzD,EACF,CACF,EAEOK,KAAAA,sBAAwB,SAC7BJ,EACAb,GAGA,OADApB,EAAKiB,MAAK,2CAA4CgB,EAAc,KAC7DjC,EAAK+B,GAAGvC,YAAU8C,sBAAuBL,EAAgBb,EAClE,EAEOmB,KAAAA,gBAAkB,SACvBN,EACAb,GAGA,OADApB,EAAKiB,MAAK,wCAAyCgB,EAAc,KAC1DjC,EAAK+B,GAAGvC,EAAAA,UAAUgD,eAAgBP,EAAgBb,EAC3D,EAEOqB,KAAAA,aAAe,SACpBR,EACAb,GAGA,OADApB,EAAKiB,MAAK,mCAAoCgB,EAAc,KACrDjC,EAAK+B,GAAGvC,EAASA,UAACkD,YAAaT,EAAgBb,EACxD,EAEOuB,KAAAA,WAAa,SAClBV,EACAb,GAGA,OADApB,EAAKiB,MAAsCgB,gCAAAA,EAAiB,KACrDjC,EAAK+B,GAAGvC,EAAAA,UAAUoD,UAAWX,EAAgBb,EACtD,EAACF,KAEM2B,kBAAoB,SACzBZ,EACAb,GAGA,OADApB,EAAKiB,MAAK,oCAAqCgB,EAAiB,KACzDjC,EAAK+B,GAAGvC,EAASA,UAACsD,iBAAkBb,EAAgBb,EAC7D,EAACF,KAEM6B,oBAAsB,SAC3Bd,EACAb,GAGA,OADApB,EAAKiB,MAAK,iCAAkCgB,EAAc,KACnDjC,EAAK+B,GAAGvC,EAAAA,UAAUwD,oBAAqBf,EAAgBb,EAChE,EAEO6B,KAAAA,kBAAoB,SACzBhB,EACAb,GAGA,OADApB,EAAKiB,MAAqCgB,+BAAAA,EAAiB,KACpDjC,EAAK+B,GAAGvC,EAASA,UAAC0D,kBAAmBjB,EAAgBb,EAC9D,EAACF,KAEMiC,kBAAoB,SACzBlB,EACAb,GAGA,OADApB,EAAKiB,MAA6CgB,uCAAAA,EAAiB,KAC5DjC,EAAK+B,GAAGvC,EAAAA,UAAU4D,iBAAkBnB,EAAgBb,EAC7D,EAEOiC,KAAAA,aAAe,SACpBpB,EACAb,GAGA,OADApB,EAAKiB,MAAK,kCAAmCgB,EAAc,KACpDjC,EAAK+B,GAAGvC,EAASA,UAAC8D,YAAarB,EAAgBb,EACxD,EAEOmC,KAAAA,kBAAoB,SACzBtB,EACAb,GAKA,OAHApB,EAAKiB,MAAK,+CACuCgB,EAAc,KAExDjC,EAAK+B,GAAGvC,YAAUgE,iBAAkBvB,EAAgBb,EAC7D,EAEOqC,KAAAA,kBAAoB,SACzBxB,EACAb,GAKA,OAHApB,EAAKiB,MAAK,+CACuCgB,EAAc,KAExDjC,EAAK+B,GAAGvC,EAAAA,UAAUkE,iBAAkBzB,EAAgBb,EAC7D,EAEOuC,KAAAA,SAAW,SAChB1B,EACA2B,EACAxC,GAEA,IAAMyC,EAAgBD,EAAWE,IAAI,SAAC9B,GACpC,OAAAhC,EAAK+B,GAAGC,EAAWC,EAAgBb,EAAS,GAG9C,OAAO,WACL,IAAA,IAAuC2C,EAAvCC,2qBAAAC,CAA0BJ,KAAaE,EAAAC,KAAAE,OACrCC,EADoBJ,EAAAK,QAGxB,CACF,EA/ME,IACMC,EACc,oBAAXC,OAAyBA,OAAOC,eAAYC,EACrDtD,KAAKJ,OAAS,IAAI2D,EAAMA,OAHPrE,GAAUT,EAAUO,GAGJwE,EAAA,CAC/BC,OAAQ,CAAExE,MAAAA,GACVyE,UAAWP,GACRhE,IAGLa,KAAKJ,OAAOJ,QAAQA,GACpBQ,KAAKH,SAAW,IAAI8D,IACpB3D,KAAKX,SAAWA,EAChBW,KAAKL,QAAUA,CACjB,CAAC,IAAAiE,EAAAhF,EAAAiF,iBAAAD,EAEO7D,MAAA,SAAM+D,GACR9D,KAAKX,UAAYd,EAAQA,SAACwF,OAC5BC,QAAQjE,MAAM,WAAY+D,EAE9B,EAACF,EAEOzD,KAAA,SAAK2D,GACP9D,KAAKX,UAAYd,WAASe,MAC5B0E,QAAQ7D,KAAK,UAAW2D,EAE5B,EAACF,EAEOK,KAAA,SAAKH,GACP9D,KAAKX,UAAYd,EAAAA,SAAS2F,MAC5BF,QAAQC,KAAK,UAAWH,EAE5B,EAACF,EAEOnE,MAAA,SAAMqE,GACR9D,KAAKX,UAAYd,EAAAA,SAAS4F,OAC5BH,QAAQvE,MAAM,WAAYqE,EAE9B,EAAClF,CAAA,CA9CD"}